"""
Django settings for soulcast_django_backend project.

Generated by 'django-admin startproject' using Django 5.0.6.

For more information on this file, see
https://docs.djangoproject.com/en/5.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.0/ref/settings/
"""

from pathlib import Path
import os

from dotenv import load_dotenv
from datetime import timedelta




# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

load_dotenv(os.path.join(BASE_DIR, ".env"))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.0/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-!u07zb1^*7*($t=1o*j158@gegp#g#@vusk%8g5&+ge#b&v4a*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True
ENVIRONMENT = os.getenv('ENVIRONMENT')

SEND_EMAIL=False #ENABLE SENDING EMAIL. IF FALSE ALL APIS WITH EMAIL FUCTIONALITY WILL GIVE OTP TOKEN ETC IN THE RESPONSE SKIPPING A TUAL MAIL SENDING BLOCKS
SEND_SMS=False #SAME AS FOR SEND_EMAIL
ENABLE_RECAPTCHA=False #IF RECAPTA CHECK NEEDED IN  ALL THE RELEVENT APIS LIKE LOGIN, SIGNUP ETC.
OTP_EXPIRY_TIME_IN_MINUTES=5
if(ENVIRONMENT=="production"):
    FRONTEND_DOMAIN='https://booking.cloudnettravels.com'
else:
    FRONTEND_DOMAIN='http://localhost:3000'
    
ALLOWED_HOSTS = [
    'localhost',
    '127.0.0.1',
    '31.97.229.73', #primary server at hostinger vps
     'cloudnettravels.com', #primary production host
    'booking.cloudnettravels.com',#primary production host
    '3.110.177.125', # server of soulcastai at aws ec2
    'ec2-13-127-251-65.ap-south-1.compute.amazonaws.com',
    'soulcastai.com',
    'www.soulcastai.com',
]


# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'rest_framework',
    "cloudnettravels",
    "omairiq_proxy",
    'users',
    'corsheaders',
    'django_filters',
    'agency',
    'phonepe_payment',
    'booking'
]

MIDDLEWARE = [
     'corsheaders.middleware.CorsMiddleware',
     'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
]

CORS_ALLOW_ALL_ORIGINS = True


# CORS_ALLOWED_ORIGINS = [
#     "http://localhost:3000",  # React development server
#     "https://midhunvijayvs.github.io",  # dev React domain
#     "https://cloudnettravels.com",
#     "https://booking.cloudnettravels.com", # Production React domain
# ]

CORS_ALLOW_METHODS = [
    "DELETE",
    "GET",
    "OPTIONS",
    "PATCH",
    "POST",
    "PUT",
]

CORS_ALLOW_HEADERS = [
    "accept",
    "accept-encoding",
    "authorization",
    "content-type",
    "dnt",
    "origin",
    "user-agent",
    "x-csrftoken",
    "x-requested-with",
]

CORS_ALLOW_CREDENTIALS = True

#setting the path to the root urls file
ROOT_URLCONF = 'cloudnettravels.urls'



TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]


ASGI_APPLICATION = 'asgi:application'

# Database


if ENVIRONMENT == "production":
#production db settings

    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.postgresql",
            "NAME": os.getenv("POSTGRES_DB"),
            "USER": os.getenv("POSTGRES_USER"),
            "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
            "HOST": os.getenv("POSTGRES_HOST"),
            "PORT": os.getenv("POSTGRES_PORT"),
        }
    }

else:  # local (default sqlite3)
    DATABASES = {
        "default": {
            "ENGINE": "django.db.backends.sqlite3",
            "NAME": BASE_DIR / "db.sqlite3",
        }
    }




# Password validation
# https://docs.djangoproject.com/en/5.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.0/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.0/howto/static-files/

# This setting informs Django of the URI path from which your static files will be served to users
# Here, they well be accessible at your-domain.onrender.com/static/... or yourcustomdomain.com/static/...
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')
STATICFILES_STORAGE = 'whitenoise.storage.CompressedManifestStaticFilesStorage'


# Default primary key field type
# https://docs.djangoproject.com/en/5.0/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

AUTH_USER_MODEL = "users.CustomUser"


#sendgrid config
DEFAULT_FROM_EMAIL="noreply@medinabaqala.com"
# Fetch PhonePe config



#auth token settings
SIMPLE_JWT = {
    'ALGORITHM': 'HS256',  # You can use other algorithms like 'RS256' for RSA, etc.
    
    # Token expiration settings
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=5),   # ⏳ 5 minutes
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),     # ⏳ 1 day
    "ROTATE_REFRESH_TOKENS": True,
    "BLACKLIST_AFTER_ROTATION": True,
    "UPDATE_LAST_LOGIN": True,
}



PHONEPE_BASE_URL = os.getenv('PHONEPE_BASE_URL')
PHONEPE_AUTHORISATION_BASE_URL = os.getenv('PHONEPE_AUTHORISATION_BASE_URL')
PHONEPE_CLIENT_ID = os.getenv('PHONEPE_CLIENT_ID')
PHONEPE_CLIENT_SECRET = os.getenv('PHONEPE_CLIENT_SECRET')
PHONEPE_CLIENT_VERSION = os.getenv('PHONEPE_CLIENT_VERSION')
#dONT KNOW WHETHER BELOW VALUES ARE NEEDED
PHONEPE_SALT_KEY=os.getenv('PHONEPE_SALT_KEY')
PHONEPE_SALT_INDEX=os.getenv('PHONEPE_SALT_INDEX')

AIRIQ_API_KEY=os.getenv('AIRIQ_API_KEY')
AIRIQ_USERNAME=os.getenv('AIRIQ_USERNAME')
AIRIQ_PASSWORD=os.getenv('AIRIQ_PASSWORD')

SENDGRID_API_KEY=os.getenv('SENDGRID_API_KEY')

TWILIO_ACCOUNT_SID=os.getenv('TWILIO_ACCOUNT_SID')
TWILIO_AUTH_TOKEN=os.getenv('TWILIO_AUTH_TOKEN')
TWILIO_PHONE_NUMBER=os.getenv('TWILIO_PHONE_NUMBER')
